<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/server/src/main/java/Main.java;C:/Users/trent/BYU Classes/Winter 2024/CS 240/chess/server/pom.xml" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/trent/BYU Classes/Winter 2024/CS 240/chess&quot;:&quot;{\&quot;/server/src/main/java/Main.java\&quot;:\&quot;This Java file contains the main entry point for a chess server application.\\n\\nKey things it does:\\n\\n- Defines a Main class with a main() method, which is the starting point for the application.\\n\\n- Imports the chess package, which likely contains classes related to chess game logic like pieces, boards, moves, etc. \\n\\n- Creates a sample ChessPiece object to represent a white pawn piece.\\n\\n- Prints out the ChessPiece to stdout to test that object creation and toString() work correctly.\\n\\n- The main purpose is to start the server application and allow it to handle requests related to chess games like making moves, querying board state, etc. Even though no server logic is shown here.\\n\\nKey functions:\\n\\n- main() - The entry point that will be called to start the application\\n- ChessPiece - Represents a chess piece on the board \\n- ChessGame.TeamColor - Enum for piece colors\\n- ChessPiece.PieceType - Enum for piece types\\n\\nSo in summary, it sets up a basic sample to test chess piece object creation for the server application\\u0027s chess game logic.\&quot;,\&quot;/server/pom.xml\&quot;:\&quot;This pom.xml file defines the Maven configuration for the server module of a chess application.\\n\\nKey functions:\\n\\n- Defines the server module as a JAR project with an artifact ID of \\\&quot;server\\\&quot;\\n- Sets the parent POM as the top-level chess project \\n- Configures the final JAR name and includes resources\\n- Defines plugins for running the main class and creating an executable JAR with dependencies\\n- Declares dependencies on the shared module, MySQL driver, SLF4J logging, Spark Java framework, Spring Security, and a local dependency JAR\\n- Allows the server module to be built and have its main class run via Maven\\n\\nIn summary, it sets up the server module as a standard Java project that can be built with all dependencies into a single executable JAR file using Maven. This allows the server code and dependencies to be packaged and run together.\&quot;}&quot;}" />
  </component>
</project>